#!/usr/bin/python
#
# Project Euler.net Problem 66
#
# Consider quadratic Diophantine equations of the form:
#
#     x^2 - Dy^2 = 1
#
# For example, when D=13, the minimal solution in x is 649^2 - 13x180^2 = 1 
# 
# It can be assumed that there are no solutions in positive integers when D is square.
# 
# By finding minimal solutions in x for D = {2, 3, 5, 6, 7}, we obtain the following:
# 
#     3^2 - 2 x 2^2 = 1
#     2^2 - 3 x 1^2 = 1
#     9^2 - 5 x 4^2 = 1
#     5^2 - 6 x 2^2 = 1
#     8^2 - 7 x 3^2 = 1
# 
# Hence, by considering minimal solutions in x for D <= 7, the largest x is obtained when D=5.
# 
# Find the value of D <= 1000 in minimal solutions of x for which the largest value of x is obtained.
#
# Answer:

# With limit, skipped
#       100   832
#     1,000   655
#    10,000   530
#   100,000   426
#   500,000   378  (New best solution, D = 459, x = 499850)
# 1,000,000        (New best solution, D = 355, x = 954809)
LIMIT = 1000000

# Create a list of all the possible values for D
D_list = range(1001)
Skipped_list = range(1001)
# Remove all of the square values of D, for which there are no solutions
for i in range(32):
    if (i*i) in D_list:
        D_list.remove(i*i)
        Skipped_list.remove(i*i)

# Create a list of all the possible values for Y
Y_list = []
# List includes all squares up to 100,000^2
for i in range(LIMIT):
    Y_list.append(i*i)

#D_list = [2, 3, 5, 6, 7]
#print D_list
#D_list = [61, 73, 85, 89, 94, 97, 103, 106, 109, 113, 118, 124, 125, 127, 133, 134, 137, 139, 149, 151, 157, 163, 166, 172, 173, 179, 181, 191, 193, 199, 201, 202, 211, 213, 214, 217, 218, 229, 233, 236, 237, 239, 241, 244, 249, 250, 251, 253, 259, 261, 262, 263, 265, 268, 271, 274, 277, 281, 283, 284, 286, 292, 293, 295, 298, 301, 302, 307, 309, 310, 311, 313, 314, 317, 319, 329, 331, 334, 337, 338, 340, 341, 343, 347, 349, 353, 354, 355, 356, 358, 364, 365, 366, 367, 369, 370, 373, 376, 379, 382, 386, 388, 389, 391, 393, 394, 397, 403, 406, 409, 412, 413, 415, 417, 419, 421, 422, 424, 425, 428, 429, 430, 431, 433, 436, 445, 446, 449, 451, 452, 453, 454, 457, 459, 460, 461, 463, 466, 467, 469, 471, 472, 474, 477, 478, 479, 481, 487, 489, 490, 491, 493, 496, 497, 498, 500, 501, 502, 508, 509, 511, 512, 513, 517, 519, 521, 523, 524, 526, 532, 533, 534, 535, 536, 537, 538, 540, 541, 542, 543, 547, 548, 549, 550, 553, 554, 556, 559, 561, 562, 565, 566, 569, 571, 581, 583, 586, 587, 589, 591, 593, 594, 596, 597, 598, 599, 601, 604, 605, 606, 607, 609, 610, 611, 613, 614, 617, 619, 622, 628, 629, 631, 633, 634, 636, 637, 639, 640, 641, 643, 645, 647, 649, 652, 653, 654, 655, 657, 661, 662, 664, 666, 667, 669, 670, 673, 679, 681, 682, 683, 685, 686, 687, 688, 691, 692, 693, 694, 698, 699, 700, 701, 703, 705, 709, 713, 716, 717, 718, 719, 721, 722, 724, 733, 734, 737, 739, 741, 742, 743, 745, 746, 748, 749, 750, 751, 753, 754, 757, 758, 761, 763, 764, 765, 766, 769, 771, 772, 773, 775, 778, 779, 781, 787, 789, 790, 794, 796, 797, 801, 802, 804, 805, 806, 807, 808, 809, 811, 814, 815, 821, 823, 826, 827, 829, 830, 831, 832, 833, 834, 835, 838, 844, 845, 846, 847, 849, 851, 852, 853, 854, 856, 857, 859, 861, 862, 863, 864, 865, 868, 869, 871, 872, 873, 875, 877, 878, 879, 881, 883, 886, 887, 889, 892, 893, 907, 908, 911, 913, 914, 916, 917, 918, 919, 921, 922, 925, 926, 927, 928, 929, 931, 932, 934, 937, 939, 941, 942, 944, 945, 946, 947, 948, 949, 950, 951, 953, 954, 955, 956, 958, 964, 965, 967, 969, 970, 971, 972, 973, 974, 976, 977, 978, 979, 981, 983, 985, 988, 989, 991, 995, 996, 997, 998, 999, 1000]
#Skipped_list = [61, 73, 85, 89, 94, 97, 103, 106, 109, 113, 118, 124, 125, 127, 133, 134, 137, 139, 149, 151, 157, 163, 166, 172, 173, 179, 181, 191, 193, 199, 201, 202, 211, 213, 214, 217, 218, 229, 233, 236, 237, 239, 241, 244, 249, 250, 251, 253, 259, 261, 262, 263, 265, 268, 271, 274, 277, 281, 283, 284, 286, 292, 293, 295, 298, 301, 302, 307, 309, 310, 311, 313, 314, 317, 319, 329, 331, 334, 337, 338, 340, 341, 343, 347, 349, 353, 354, 355, 356, 358, 364, 365, 366, 367, 369, 370, 373, 376, 379, 382, 386, 388, 389, 391, 393, 394, 397, 403, 406, 409, 412, 413, 415, 417, 419, 421, 422, 424, 425, 428, 429, 430, 431, 433, 436, 445, 446, 449, 451, 452, 453, 454, 457, 459, 460, 461, 463, 466, 467, 469, 471, 472, 474, 477, 478, 479, 481, 487, 489, 490, 491, 493, 496, 497, 498, 500, 501, 502, 508, 509, 511, 512, 513, 517, 519, 521, 523, 524, 526, 532, 533, 534, 535, 536, 537, 538, 540, 541, 542, 543, 547, 548, 549, 550, 553, 554, 556, 559, 561, 562, 565, 566, 569, 571, 581, 583, 586, 587, 589, 591, 593, 594, 596, 597, 598, 599, 601, 604, 605, 606, 607, 609, 610, 611, 613, 614, 617, 619, 622, 628, 629, 631, 633, 634, 636, 637, 639, 640, 641, 643, 645, 647, 649, 652, 653, 654, 655, 657, 661, 662, 664, 666, 667, 669, 670, 673, 679, 681, 682, 683, 685, 686, 687, 688, 691, 692, 693, 694, 698, 699, 700, 701, 703, 705, 709, 713, 716, 717, 718, 719, 721, 722, 724, 733, 734, 737, 739, 741, 742, 743, 745, 746, 748, 749, 750, 751, 753, 754, 757, 758, 761, 763, 764, 765, 766, 769, 771, 772, 773, 775, 778, 779, 781, 787, 789, 790, 794, 796, 797, 801, 802, 804, 805, 806, 807, 808, 809, 811, 814, 815, 821, 823, 826, 827, 829, 830, 831, 832, 833, 834, 835, 838, 844, 845, 846, 847, 849, 851, 852, 853, 854, 856, 857, 859, 861, 862, 863, 864, 865, 868, 869, 871, 872, 873, 875, 877, 878, 879, 881, 883, 886, 887, 889, 892, 893, 907, 908, 911, 913, 914, 916, 917, 918, 919, 921, 922, 925, 926, 927, 928, 929, 931, 932, 934, 937, 939, 941, 942, 944, 945, 946, 947, 948, 949, 950, 951, 953, 954, 955, 956, 958, 964, 965, 967, 969, 970, 971, 972, 973, 974, 976, 977, 978, 979, 981, 983, 985, 988, 989, 991, 995, 996, 997, 998, 999, 1000]
D_list = [61, 73, 89, 94, 97, 106, 109, 113, 124, 125, 127, 133, 137, 139, 149, 151, 157, 163, 166, 172, 173, 179, 181, 191, 193, 199, 201, 202, 211, 214, 217, 229, 233, 236, 239, 241, 244, 249, 250, 251, 253, 259, 261, 262, 265, 268, 271, 274, 277, 281, 283, 284, 286, 292, 293, 295, 298, 301, 302, 307, 309, 310, 311, 313, 317, 319, 329, 331, 334, 337, 341, 343, 347, 349, 353, 355, 356, 358, 364, 365, 366, 367, 369, 373, 376, 379, 382, 388, 389, 391, 393, 394, 397, 403, 406, 409, 412, 415, 417, 419, 421, 422, 424, 428, 429, 430, 431, 433, 436, 445, 446, 449, 451, 452, 453, 454, 457, 460, 461, 463, 466, 467, 471, 477, 478, 479, 481, 487, 489, 490, 491, 493, 496, 497, 500, 501, 502, 508, 509, 511, 512, 513, 517, 519, 521, 523, 524, 526, 532, 533, 534, 535, 537, 538, 541, 542, 543, 547, 548, 549, 550, 553, 554, 556, 559, 561, 562, 565, 566, 569, 571, 581, 583, 586, 587, 589, 593, 594, 596, 597, 598, 599, 601, 604, 605, 606, 607, 609, 610, 613, 614, 617, 619, 622, 628, 629, 631, 633, 634, 636, 637, 639, 640, 641, 643, 645, 647, 649, 652, 653, 654, 655, 657, 661, 662, 664, 666, 667, 669, 670, 673, 679, 681, 682, 683, 685, 686, 688, 691, 692, 694, 698, 699, 700, 701, 703, 709, 713, 716, 717, 718, 719, 721, 722, 724, 733, 734, 737, 739, 741, 742, 743, 745, 746, 748, 749, 750, 751, 753, 754, 757, 758, 761, 763, 764, 766, 769, 771, 772, 773, 775, 778, 779, 781, 787, 789, 790, 794, 796, 797, 801, 802, 804, 805, 806, 807, 808, 809, 811, 814, 821, 823, 826, 827, 829, 831, 832, 833, 834, 835, 838, 844, 845, 846, 847, 849, 851, 853, 854, 856, 857, 859, 861, 862, 863, 865, 868, 869, 871, 873, 877, 878, 879, 881, 883, 886, 889, 893, 907, 911, 913, 914, 916, 917, 918, 919, 921, 922, 925, 926, 928, 929, 931, 932, 934, 937, 941, 944, 946, 947, 949, 951, 953, 954, 955, 956, 958, 964, 965, 967, 969, 970, 971, 972, 973, 974, 976, 977, 981, 988, 989, 991, 995, 996, 997, 998, 999, 1000]
Skipped_list = [61, 73, 89, 94, 97, 106, 109, 113, 124, 125, 127, 133, 137, 139, 149, 151, 157, 163, 166, 172, 173, 179, 181, 191, 193, 199, 201, 202, 211, 214, 217, 229, 233, 236, 239, 241, 244, 249, 250, 251, 253, 259, 261, 262, 265, 268, 271, 274, 277, 281, 283, 284, 286, 292, 293, 295, 298, 301, 302, 307, 309, 310, 311, 313, 317, 319, 329, 331, 334, 337, 341, 343, 347, 349, 353, 355, 356, 358, 364, 365, 366, 367, 369, 373, 376, 379, 382, 388, 389, 391, 393, 394, 397, 403, 406, 409, 412, 415, 417, 419, 421, 422, 424, 428, 429, 430, 431, 433, 436, 445, 446, 449, 451, 452, 453, 454, 457, 460, 461, 463, 466, 467, 471, 477, 478, 479, 481, 487, 489, 490, 491, 493, 496, 497, 500, 501, 502, 508, 509, 511, 512, 513, 517, 519, 521, 523, 524, 526, 532, 533, 534, 535, 537, 538, 541, 542, 543, 547, 548, 549, 550, 553, 554, 556, 559, 561, 562, 565, 566, 569, 571, 581, 583, 586, 587, 589, 593, 594, 596, 597, 598, 599, 601, 604, 605, 606, 607, 609, 610, 613, 614, 617, 619, 622, 628, 629, 631, 633, 634, 636, 637, 639, 640, 641, 643, 645, 647, 649, 652, 653, 654, 655, 657, 661, 662, 664, 666, 667, 669, 670, 673, 679, 681, 682, 683, 685, 686, 688, 691, 692, 694, 698, 699, 700, 701, 703, 709, 713, 716, 717, 718, 719, 721, 722, 724, 733, 734, 737, 739, 741, 742, 743, 745, 746, 748, 749, 750, 751, 753, 754, 757, 758, 761, 763, 764, 766, 769, 771, 772, 773, 775, 778, 779, 781, 787, 789, 790, 794, 796, 797, 801, 802, 804, 805, 806, 807, 808, 809, 811, 814, 821, 823, 826, 827, 829, 831, 832, 833, 834, 835, 838, 844, 845, 846, 847, 849, 851, 853, 854, 856, 857, 859, 861, 862, 863, 865, 868, 869, 871, 873, 877, 878, 879, 881, 883, 886, 889, 893, 907, 911, 913, 914, 916, 917, 918, 919, 921, 922, 925, 926, 928, 929, 931, 932, 934, 937, 941, 944, 946, 947, 949, 951, 953, 954, 955, 956, 958, 964, 965, 967, 969, 970, 971, 972, 973, 974, 976, 977, 981, 988, 989, 991, 995, 996, 997, 998, 999, 1000]
# The following have still to be tried in the 500k to 1M range
D_list = [61, 73, 94, 97, 106, 109, 113, 124, 127, 133, 137, 139, 149, 151, 157, 163, 166, 172, 173, 179, 181, 191, 193, 199, 202, 211, 214, 217, 229, 233, 239, 241, 244, 249, 250, 251, 253, 261, 262, 265, 268, 271, 274, 277, 281, 283, 284, 292, 293, 295, 298, 301, 302, 307, 309, 311, 313, 317, 319, 329, 331, 334, 337, 341, 343, 349, 353, 358, 364, 365, 367, 369, 373, 376, 379, 382, 388, 389, 391, 393, 394, 397, 406, 409, 412, 415, 417, 419, 421, 422, 424, 428, 429, 430, 431, 433, 436, 445, 446, 449, 451, 452, 453, 454, 457, 460, 461, 463, 466, 467, 471, 477, 478, 479, 481, 487, 489, 490, 491, 493, 496, 497, 500, 501, 502, 508, 509, 511, 512, 513, 517, 519, 521, 523, 524, 526, 532, 533, 534, 535, 537, 538, 541, 542, 543, 547, 548, 549, 550, 553, 554, 556, 559, 561, 562, 565, 566, 569, 571, 581, 583, 586, 587, 589, 593, 594, 596, 597, 598, 599, 601, 604, 605, 606, 607, 609, 610, 613, 614, 617, 619, 622, 628, 629, 631, 633, 634, 636, 637, 639, 640, 641, 643, 645, 647, 649, 652, 653, 654, 655, 657, 661, 662, 664, 666, 667, 669, 670, 673, 679, 681, 682, 683, 685, 686, 688, 691, 692, 694, 698, 699, 700, 701, 703, 709, 713, 716, 717, 718, 719, 721, 722, 724, 733, 734, 737, 739, 741, 742, 743, 745, 746, 748, 749, 750, 751, 753, 754, 757, 758, 761, 763, 764, 766, 769, 771, 772, 773, 775, 778, 779, 781, 787, 789, 790, 794, 796, 797, 801, 802, 804, 805, 806, 807, 808, 809, 811, 814, 821, 823, 826, 827, 829, 831, 832, 833, 834, 835, 838, 844, 845, 846, 847, 849, 851, 853, 854, 856, 857, 859, 861, 862, 863, 865, 868, 869, 871, 873, 877, 878, 879, 881, 883, 886, 889, 893, 907, 911, 913, 914, 916, 917, 918, 919, 921, 922, 925, 926, 928, 929, 931, 932, 934, 937, 941, 944, 946, 947, 949, 951, 953, 954, 955, 956, 958, 964, 965, 967, 969, 970, 971, 972, 973, 974, 976, 977, 981, 988, 989, 991, 995, 996, 997, 998, 999, 1000]
Skipped_list = [61, 73, 94, 97, 106, 109, 113, 124, 127, 133, 137, 139, 149, 151, 157, 163, 166, 172, 173, 179, 181, 191, 193, 199, 202, 211, 214, 217, 229, 233, 239, 241, 244, 249, 250, 251, 253, 261, 262, 265, 268, 271, 274, 277, 281, 283, 284, 292, 293, 295, 298, 301, 302, 307, 309, 311, 313, 317, 319, 329, 331, 334, 337, 341, 343, 349, 353, 358, 364, 365, 367, 369, 373, 376, 379, 382, 388, 389, 391, 393, 394, 397, 406, 409, 412, 415, 417, 419, 421, 422, 424, 428, 429, 430, 431, 433, 436, 445, 446, 449, 451, 452, 453, 454, 457, 460, 461, 463, 466, 467, 471, 477, 478, 479, 481, 487, 489, 490, 491, 493, 496, 497, 500, 501, 502, 508, 509, 511, 512, 513, 517, 519, 521, 523, 524, 526, 532, 533, 534, 535, 537, 538, 541, 542, 543, 547, 548, 549, 550, 553, 554, 556, 559, 561, 562, 565, 566, 569, 571, 581, 583, 586, 587, 589, 593, 594, 596, 597, 598, 599, 601, 604, 605, 606, 607, 609, 610, 613, 614, 617, 619, 622, 628, 629, 631, 633, 634, 636, 637, 639, 640, 641, 643, 645, 647, 649, 652, 653, 654, 655, 657, 661, 662, 664, 666, 667, 669, 670, 673, 679, 681, 682, 683, 685, 686, 688, 691, 692, 694, 698, 699, 700, 701, 703, 709, 713, 716, 717, 718, 719, 721, 722, 724, 733, 734, 737, 739, 741, 742, 743, 745, 746, 748, 749, 750, 751, 753, 754, 757, 758, 761, 763, 764, 766, 769, 771, 772, 773, 775, 778, 779, 781, 787, 789, 790, 794, 796, 797, 801, 802, 804, 805, 806, 807, 808, 809, 811, 814, 821, 823, 826, 827, 829, 831, 832, 833, 834, 835, 838, 844, 845, 846, 847, 849, 851, 853, 854, 856, 857, 859, 861, 862, 863, 865, 868, 869, 871, 873, 877, 878, 879, 881, 883, 886, 889, 893, 907, 911, 913, 914, 916, 917, 918, 919, 921, 922, 925, 926, 928, 929, 931, 932, 934, 937, 941, 944, 946, 947, 949, 951, 953, 954, 955, 956, 958, 964, 965, 967, 969, 970, 971, 972, 973, 974, 976, 977, 981, 988, 989, 991, 995, 996, 997, 998, 999, 1000]
print len(Skipped_list)

best_D = 0
best_x = 0
for D in D_list:
    print "Searching for solution with D={0}: ".format(D),
    x = 500000
    found = 0
    while (found != 1) & (x <= LIMIT):
        x += 1
        x_sq = x*x
        y_rem = (x_sq - 1) % D
        if (y_rem != 0):
            continue
        y_sq = (x_sq - 1) / D
        if (y_sq != 0) & (y_sq in Y_list):
            found = 1
    if (x > LIMIT):
        print "Error: solution not found, x > LIMIT"
    else:
        print "{0}^2 - {1}x{2}^2 = 1".format(x, D, Y_list.index((x*x - 1)/D))
        Skipped_list.remove(D)
        if (x > best_x):
            best_x = x
            best_D = D
            print "New best solution, D = {0}, x = {1}".format(best_D, best_x)

print Skipped_list
print len(Skipped_list)
