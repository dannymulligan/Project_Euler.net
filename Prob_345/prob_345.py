#!/usr/bin/python
# coding=utf-8
#
# Project Euler.net Problem 345
#
# Matrix Sum
#
# We define the Matrix Sum of a matrix as the maximum sum of matrix
# elements with each element being the only one in his row and
# column. For example, the Matrix Sum of the matrix below equals 3315
# ( = 863 + 383 + 343 + 959 + 767):
# 
#        7   53  183  439 <863>
#      497 <383> 563   79  973
#      287   63 <343> 169  583
#      627  343  773 <959> 943
#     <767> 473  103  699  303
#
# Find the Matrix Sum of:
#
#       7  53 183 439 863 497 383 563  79 973 287  63 343 169 583
#     627 343 773 959 943 767 473 103 699 303 957 703 583 639 913
#     447 283 463  29  23 487 463 993 119 883 327 493 423 159 743
#     217 623   3 399 853 407 103 983  89 463 290 516 212 462 350
#     960 376 682 962 300 780 486 502 912 800 250 346 172 812 350
#     870 456 192 162 593 473 915  45 989 873 823 965 425 329 803
#     973 965 905 919 133 673 665 235 509 613 673 815 165 992 326
#     322 148 972 962 286 255 941 541 265 323 925 281 601  95 973
#     445 721  11 525 473  65 511 164 138 672  18 428 154 448 848
#     414 456 310 312 798 104 566 520 302 248 694 976 430 392 198
#     184 829 373 181 631 101 969 613 840 740 778 458 284 760 390
#     821 461 843 513  17 901 711 993 293 157 274  94 192 156 574
#      34 124   4 878 450 476 712 914 838 669 875 299 823 329 699
#     815 559 813 459 522 788 168 586 966 232 308 833 251 631 107
#     813 883 451 509 615  77 281 613 459 205 380 274 302  35 805
#
# Solved 09/09/11
# 166 problems solved
# Position #432 on level 4

import sys
import time
start_time = time.clock()

import itertools

########################################

#nums = [
#    [   7,  53, 183, 439, 863, 497, 383, 563,  79, 973, 287,  63, 343, 169, 583 ],
#    [ 627, 343, 773, 959, 943, 767, 473, 103, 699, 303, 957, 703, 583, 639, 913 ],
#    [ 447, 283, 463,  29,  23, 487, 463, 993, 119, 883, 327, 493, 423, 159, 743 ],
#    [ 217, 623,   3, 399, 853, 407, 103, 983,  89, 463, 290, 516, 212, 462, 350 ],
#    [ 960, 376, 682, 962, 300, 780, 486, 502, 912, 800, 250, 346, 172, 812, 350 ],
#    [ 870, 456, 192, 162, 593, 473, 915,  45, 989, 873, 823, 965, 425, 329, 803 ],
#    [ 973, 965, 905, 919, 133, 673, 665, 235, 509, 613, 673, 815, 165, 992, 326 ],
#    [ 322, 148, 972, 962, 286, 255, 941, 541, 265, 323, 925, 281, 601,  95, 973 ],
#    [ 445, 721,  11, 525, 473,  65, 511, 164, 138, 672,  18, 428, 154, 448, 848 ],
#    [ 414, 456, 310, 312, 798, 104, 566, 520, 302, 248, 694, 976, 430, 392, 198 ],
#    [ 184, 829, 373, 181, 631, 101, 969, 613, 840, 740, 778, 458, 284, 760, 390 ],
#    [ 821, 461, 843, 513,  17, 901, 711, 993, 293, 157, 274,  94, 192, 156, 574 ],
#    [  34, 124,   4, 878, 450, 476, 712, 914, 838, 669, 875, 299, 823, 329, 699 ],
#    [ 815, 559, 813, 459, 522, 788, 168, 586, 966, 232, 308, 833, 251, 631, 107 ],
#    [ 813, 883, 451, 509, 615,  77, 281, 613, 459, 205, 380, 274, 302,  35, 805 ]
#]
nums = [
    [ 973,  63, 383, 343, 169, 497, 583,  53,   7, 183, 439, 863, 563,  79, 287 ],
    [ 248, 976, 566, 430, 392, 104, 198, 456, 414, 310, 312, 798, 520, 302, 694 ],
    [ 740, 458, 969, 284, 760, 101, 390, 829, 184, 373, 181, 631, 613, 840, 778 ],
    [ 669, 299, 712, 823, 329, 476, 699, 124,  34,   4, 878, 450, 914, 838, 875 ],
    [ 613, 815, 665, 165, 992, 673, 326, 965, 973, 905, 919, 133, 235, 509, 673 ],
    [ 157,  94, 711, 192, 156, 901, 574, 461, 821, 843, 513,  17, 993, 293, 274 ],
    [ 323, 281, 941, 601,  95, 255, 973, 148, 322, 972, 962, 286, 541, 265, 925 ],
    [ 205, 274, 281, 302,  35,  77, 805, 883, 813, 451, 509, 615, 613, 459, 380 ],
    [ 303, 703, 473, 583, 639, 767, 913, 343, 627, 773, 959, 943, 103, 699, 957 ],
    [ 883, 493, 463, 423, 159, 487, 743, 283, 447, 463,  29,  23, 993, 119, 327 ],
    [ 463, 516, 103, 212, 462, 407, 350, 623, 217,   3, 399, 853, 983,  89, 290 ],
    [ 800, 346, 486, 172, 812, 780, 350, 376, 960, 682, 962, 300, 502, 912, 250 ],
    [ 873, 965, 915, 425, 329, 473, 803, 456, 870, 192, 162, 593,  45, 989, 823 ],
    [ 672, 428, 511, 154, 448,  65, 848, 721, 445,  11, 525, 473, 164, 138,  18 ],
    [ 232, 833, 168, 251, 631, 788, 107, 559, 815, 813, 459, 522, 586, 966, 308 ]
]
solns = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]

#nums = [
#    [   7,  53, 183, 439, 863 ],
#    [ 497, 383, 563,  79, 973 ],
#    [ 287,  63, 343, 169, 583 ],
#    [ 627, 343, 773, 959, 943 ],
#    [ 767, 473, 103, 699, 303 ]
#]
#solns = [0, 1, 2, 3, 4]

best = 0

for sol in itertools.permutations(solns):
    ans = nums[ 0][sol[ 0]] + nums[ 1][sol[ 1]] + nums[ 2][sol[ 2]] + nums[ 3][sol[ 3]] + nums[ 4][sol[ 4]] \
        + nums[ 5][sol[ 5]] + nums[ 6][sol[ 6]] + nums[ 7][sol[ 7]] + nums[ 8][sol[ 8]] + nums[ 9][sol[ 9]] \
        + nums[10][sol[10]] + nums[11][sol[11]] + nums[12][sol[12]] + nums[13][sol[13]] + nums[14][sol[14]]

    if (ans > best):
        best = ans
        print sol, ans
print "Time taken = {0} seconds".format(time.clock() - start_time)
