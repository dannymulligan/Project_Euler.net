#!/usr/bin/python
#
# Project Euler.net Problem 12
#
# The sequence of triangle numbers is generated by adding the natural
# numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 +
# 7 = 28. The first ten terms would be:
#
#     1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
#
# Let us list the factors of the first seven triangle numbers:
#
#      1: 1
#      3: 1,3
#      6: 1,2,3,6
#     10: 1,2,5,10
#     15: 1,3,5,15
#     21: 1,3,7,21
#     28: 1,2,4,7,14,28
#
# We can see that 28 is the first triangle number to have over five
# divisors.
#
# What is the value of the first triangle number to have over five
# hundred divisors?
#
# Ran in 308.5 minutes = ~6 hours


MAX = 76576501
GOAL = 500

def triangle(n):
    t = 0
    for i in xrange(1,n+1):
        t += i
        yield t


def divs(n):
    d = 0
    for i in xrange(1,(n/2)+1):
        if ((n % i) == 0):
            d += 1
    d += 1  # The number is a divisor of itself
    return d

max_divs = 0
i = 0
for t in triangle(MAX):
    i += 1

    d = divs(t)
    if (d > max_divs):
        max_divs = d
        print "{0}: Triangle number {1} had {2} divisors".format(i, t, d)

    if ((i % 1000) == 0):
        print "    {0}: Triangle number {1} had {2} divisors".format(i, t, d)

    if (d > GOAL):
        print t, divs(t)
        print "Answer =", t
        exit()

