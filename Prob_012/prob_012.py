#!/usr/bin/python
#
# Project Euler.net Problem 12
#
# The sequence of triangle numbers is generated by adding the natural
# numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 +
# 7 = 28. The first ten terms would be:
#
#     1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
#
# Let us list the factors of the first seven triangle numbers:
#
#      1: 1
#      3: 1,3
#      6: 1,2,3,6
#     10: 1,2,5,10
#     15: 1,3,5,15
#     21: 1,3,7,21
#     28: 1,2,4,7,14,28
#
# We can see that 28 is the first triangle number to have over five
# divisors.
#
# What is the value of the first triangle number to have over five
# hundred divisors?
#
# Ran in ~68 seconds


#MAX = 100
MAX = 12376  # t(12375) = 76576500 with 576 divisors
GOAL = 500

LIMIT_PRIME = (MAX*(MAX+1)/2 + 1)
print("LIMIT_PRIME =", LIMIT_PRIME)
prime_table = [1]*LIMIT_PRIME  # table of largest factor


def calculate_primes():
    print("Calculating primes up to {0}".format(LIMIT_PRIME))
    i = 2
    while (i < (LIMIT_PRIME/2)):
        if (prime_table[i] == 1):
            j = i*2
            while (j < LIMIT_PRIME):
                prime_table[j] = i
                j += i
        i += 1
    print("Done calculating primes")

calculate_primes()


def prime_factors(n):
    factors = []
    while (n != 1):
        if (prime_table[n] == 1):
            # n is a prime
            factors.append(n)
            n = 1
        else:
            # n is a composite number
            factors.append(prime_table[n])
            n /= prime_table[n]
    return factors


def triangle(n):
    t = 0
    for i in xrange(1,n+1):
        t += i
        yield t


def divisors(n):
    d = prime_factors(n)

    div_cnt = 1
    mult = 2
    prev_factor = 0
    for factor in d:
        if (factor == prev_factor):
            div_cnt /= mult
            mult += 1
        else:
            mult = 2
        div_cnt *= mult
        prev_factor = factor
    return div_cnt


max_div_cnt = 0
i = 0
for t in triangle(MAX):
    i += 1

    div_cnt = divisors(t)

    if (div_cnt > max_div_cnt):
        max_div_cnt = div_cnt
        print("{0}: Triangle number {1} has {2} divisors".format(i, t, div_cnt))

    if ((i % 1000) == 0):
        print("    {0}: Triangle number {1} has {2} divisors".format(i, t, div_cnt))

    if (div_cnt > GOAL):
        print("t = {}, div_cnt = {}".format(t, div_cnt))
        print("Answer = {}".format(t))
        exit()
