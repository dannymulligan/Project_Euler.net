// Project Euler.net Problem 12
//
// The sequence of triangle numbers is generated by adding the natural
// numbers. So the 7^(th) triangle number would be 1 + 2 + 3 + 4 + 5 +
// 6 + 7 = 28. The first ten terms would be:
//
//     1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
//
// Let us list the factors of the first seven triangle numbers:
//
//      1: 1
//      3: 1,3
//      6: 1,2,3,6
//     10: 1,2,5,10
//     15: 1,3,5,15
//     21: 1,3,7,21
//     28: 1,2,4,7,14,28
//
// We can see that 28 is the first triangle number to have over five divisors.
//
// What is the value of the first triangle number to have over five
// hundred divisors?

#include <iostream>
#include <vector>

//#define MAX 80000000 
#define MAX 76576501
#define GOAL 500

const int LIMIT_PRIME = 76588877;  // smallest int so that square is greater than target
int prime_table[LIMIT_PRIME];
void calculate_primes() {
  std::cout << "Starting calculate_primes()\n";
  int i = 2;
  int j;

  while (i < (LIMIT_PRIME/2)) {
    if (prime_table[i] == 1) {
      j = i*2;
        while (j < LIMIT_PRIME) {
          prime_table[j] = i;
          j += i;
        }
    }
    i += 1;
  }
  std::cout << "Finishing calculate_primes()\n";
}


std::vector<int> prime_factors(int n) {
  std::vector<int> factors;

  while (n != 1){
    if (prime_table[n] == 1) {
      // n is a prime
      factors.push_back(n);
      n = 1;
    } else {
      // n is a composite number
      factors.push_back(prime_table[n]);
      n /= prime_table[n];
    }
  }
  return factors;
}

int divisor_count(int n) {
  std::vector<int> d = prime_factors(n);

  int divs = 1;
  int mult = 2;
  int factor;
  int prev_factor = 0;

  for(int i = 0; i < d.size(); i++) {
    factor = d[i];
    if (factor == prev_factor) {
      divs /= mult;
      mult += 1;
    } else {
      mult = 2;
    }
    divs *= mult;
    prev_factor = factor;
  }

  return divs;
}



int main()
{
  // Initialize a table of primes
  for(int i = 0; i < LIMIT_PRIME; i++)
    prime_table[i] = 1;
  calculate_primes();

  // Try out triangle numbers
  printf("// Try out triangle numbers\n");
  int div_cnt, record_div_cnt = 0;
  long triangle = 0;
  for (int i = 1; i < MAX; i++) {
    triangle += i;

    div_cnt = divisor_count(triangle);

    if (div_cnt > record_div_cnt) {
      printf("%d: Triangle number %ld has %d divisors\n", i, triangle, div_cnt);
      record_div_cnt = div_cnt;
    }

    if ((i % 1000) == 0)
      std::printf("    %d: Triangle number %ld has %d divisors\n", i, triangle, div_cnt);

    if (triangle >= MAX)
      return(0);

    if (div_cnt >= GOAL) {
      std::printf("Answer = %ld\n", triangle);
      return(0);
    }
  }

}
