#!/usr/bin/env python
# coding=utf-8
#
# Project Euler.net Problem 190
#
# Maximizing a weighted product
#
# Let Sm = (x1, x2, ... , xM) be the m-tuple of positive real numbers
# with x1 + x2 + ... + xm = m for which Pm = x1 * x2^2 * ... * xm^m is
# maximised.
#
# For example, it can be verified that [P10] = 4112 (where [ ] is the
# integer part function).
#
# Find Sum[Pm] for 2 <= m <= 15.

# This solution is based on observing a pattern in the solutions
# generated by the numeric calculations for smaller values of n

def Pm(m):
    solution = [0.0] + [2*(n+1)/(m+1) for n in range(m)]
    P = 1.0
    for pow, x in enumerate(solution):
        P *= x**pow
    return P

Answer = 0
for n in range(2, 16):
    P = Pm(n)
    Answer += int(P)
    print("Pm({}) = {}, [Pm({})] = {}".format(n, P, n, int(P)))

print("Answer is {}".format(Answer))
